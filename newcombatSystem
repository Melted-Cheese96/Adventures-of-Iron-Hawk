import random
from time import sleep
import sys 

class MainPlayer: #Test player 
    weapons = {'sword': 10}
    weaponDamage = 10
    def __init__(self, playerName):
        self.playerName = playerName 
        self.HP = 30
        self.AC = 20

    def removeHealth(self, requiredAmount):
        self.playerHealth -= requiredAmount

class Goblin: #Test enemy class
    weapons = {'dagger': 4}
    weaponDamage = 4
    def __init__(self):
        self.name = 'Standard goblin'
        self.HP = 30
        self.AC = 30 

        
player1 = MainPlayer('Test player')


def displayMap():
    global mapAreas
    for locations, values in zip(mapAreas.keys(), mapAreas.values()):
        print(locations + ':' + values)

def generateEnemies(enemyName, position, enemy):
    global gridNames
    if mapAreas[position] == '':
        mapAreas[position] = goblin1.name
    else:
        print('error, map area filled')
        newCoords = random.choice(gridNames) + str(random.randint(1,4))
        print(newCoords)
        mapAreas[newCoords] = goblin1.name
        print('After here')

def combat2(player, enemy):
    
    print('You will be fighting {}'.format(enemy.name))
    roll = input('Do you want to roll the die?')
    if roll == 'yes':
        while True:
            print('Rolling dice...')
            d20Randomizer = random.randint(1,20)
            sleep(2)
            print('You rolled a {}'.format(d20Randomizer))
            if d20Randomizer >= 10:
                print('You have rolled past the enemies AC!')
                enemy.HP -= player.weaponDamage
                print(enemy.HP)

            elif d20Randomizer == 20:
                print('Critical Hit!')
                sleep(2)
                enemy.HP -= player.weaponDamage + 20
                print(enemy.HP)

            elif d20Randomizer <= 4:
                print('The enemy has done damage to you!')
                player.HP -= enemy.weaponDamage
                print('Your health is now {}'.format(player.HP))
                
            else:
                print('You did not get past the enemies AC')
                print('Restarting...')
                sleep(2)
    else:
        print('You try to avoid fighting')
    


def Combat(player):
    global goblin1
    global gridNames
    global mapAreas
    goblin1 = Goblin()
    goblin2 = Goblin()
    mapAreas = {'a1': '', 'a2': '', 'a3': '', 'a4': '',
                'b1': '', 'b2': '', 'b3': '', 'b4': '',
                'c1': '', 'c2': '', 'c3': '', 'c4': '',
                'd1': '', 'd2': '', 'd3': '', 'd4': ''}
    gridNames = ['a', 'b', 'c', 'd']
    enemy1Pos = random.choice(gridNames) + str(random.randint(1,4))
    generateEnemies(goblin1.name, enemy1Pos, goblin1)
    enemy2 = random.choice(gridNames) + str(random.randint(1,4))
    generateEnemies(goblin2.name, enemy2, goblin2)
    #print('Enemy 1 is in {} and enemy2 is in {}'.format(enemy1, enemy2))
    displayMap()
    allEnemies = [] 
    for values in mapAreas.values():
        if values == '':
            pass 
        else:
            allEnemies.append(values)
    ChooseEnemy = random.choice(allEnemies)
    combat2(player, goblin1)
    

Combat(player1)
